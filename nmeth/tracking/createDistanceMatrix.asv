function D = createDistanceMatrix(M,N)
% createDistanceMatrix calculates the distance matrix for two sets of points
%
% SYNOPSIS   D=createDistanceMatrix(M,N)
%
% INPUT      M and N are the matrices containing the set of point coordinates.
%            M and N can represent point positions in 1, 2 and 3D, as follows.
%            
%            In 1D: M=[ x1        and   N=[ x1
%                       x2                  x2
%                       ...                ... 
%                       xm ]                xn ]
%
%            In 2D:
%                   M=[ y1 x1     and   N=[ y1 x1
%                       y2 x2              y2 x2
%                        ...                ...
%                       ym xm ]            yn xn ]
%
%            In 3D:
%                   M=[ y1 x1 z1  and   N=[ y1 x1 z1
%                       y2 x2 z2            y2 x2 z2
%                         ...                ...
%                       ym xm zm ]          yn xn zn ]
%
%
% OUTPUT   D : distance matrix D=(dij), i=1..m, j=1..n
% 
% REMARK   For 1D, both positive and negative distances are returned.
%
%This file is part of u-track.
%
%    u-track is free software: you can redistribute it and/or modify
%    it under the terms of the GNU General Public License as published by
%    the Free Software Foundation, either version 3 of the License, or
%   (at your option) any later version.
%
%    u-track is distributed in the hope that it will be useful,
%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%    GNU General Public License for more details.
%
%    You should have received a copy of the GNU General Public License
%    along with u-track.  If not, see <http://www.gnu.org/licenses/>.
%
% Copyright: Ponti 08/05

Mrows = size(M,1);
Nrows = size(N,1);

Ncols = max(size(M,2),size(N,2));

if Ncols == 1
    
    for i = 1:1:Nrows
        
        for j = 1:1:Mrows
            
            % Calculate the distace and store the value in D
            D(i,j) = N(i) - M(j);
        end
    end

elseif Ncols == 2
    for i = 1:1:Nrows
        
        % Get the source position
        nX = N(i,2);
        nY = N(i,1);
        
        for j = 1:1:Mrows
            
            % Get target position
            mX = M(j,2);
            mY = M(j,1);
            
            % Calculate the distace and store the value in D
            D(i,j) = sqrt(()^2 - ()^2)
